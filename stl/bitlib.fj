// Every line is (a bit) bananas!
// Implementation of single bit-variables operations

// should be assembled with the runlib.fj file
// This file is independent of the bit-width, and uses the consts defined at runlib.fj

// Everything after // is ignored, everything before first : is ignored too, and every whitespace is ignored (besides new line)
// An opcode is:  F;L  F  ;L  or just  ;  (no F => F=0;  no L => L=next)

// Complexity note: phi is log2 of the total number of fj operations, counting .wflip* as one.



// ---------- Compilation Time:
// Complexity: 1


.def comp_if expr l0 l1
    ; expr ? l1 : l0
.end

.def comp_if0 expr l0 : l1
    .comp_if expr l0 l1
  l1:
.end

.def comp_if1 expr l1 : l0
    .comp_if expr l0 l1
  l0:
.end


.def comp_flip_if bit expr
    (expr ? bit : 0)
.end


// ---------- Memory Variables:
// Size Complexity: 1


.def bit value
    ; value ? dw : 0
.end

.def bit
    .bit 0
.end



// ---------- Memory Manipulation:


// Complexity: phi+2
.def zero x
    .xor x x
.end


// Complexity: phi+3
.def one x
    .zero x
    .not x
.end


////Complexity: 2phi + 9
//.def __if_mov dst src : l0 l1 flip end
//    .if src l0 l1
//    l0: .if dst end flip
//    l1: .if dst flip end
//    flip:   .not dst
//    end:
//.end


// safe even for dst==src !
// Complexity: 2phi+5
.def mov dst src : do_mov end
    .comp_if dst-src end do_mov
  do_mov:
    .zero dst
    .xor dst src
  end:
.end


//Complexity: 2phi+10
.def swap a b : a0 a1 notnot end
    .if a a0 a1
    a0: .if b end flip
    a1: .if b flip end
    notnot: .not a
            .not b
    end:
.end



// ---------- Unconditional Jump
// Complexity: 1


.def skip
    ;$ + dw
.end


.def loop
    ;$ - dw
.end



// ---------- Conditional Jump


// Complexity: phi+4
.def if x l0 l1 : label_ptr base_jump_label
    .xor label_ptr x
  label_ptr:
    ;base_jump_label
    .pad 2
  base_jump_label:
    ;l0
    label_ptr + dbit;l1
.end

.def if1 x l1 : end
    .if x end l1
  end:
.end

.def if0 x l0 : end
    .if x l0 end
  end:
.end


// Complexity: 2phi+8
.def cmp a b lt eq gt : a_is1_label
    .if1 a a_is1_label
    .if b eq lt
  a_is1_label:
    .if b gt eq
.end



// ---------- Logical Macros:


// Complexity: phi+2
.def xor dst src
    .exact_xor dst + dbit src
.end

.def exact_xor dst src : base_jump_label cleanup
    .wflip src+w base_jump_label
    ;src
    .pad 2
  base_jump_label:
    ;cleanup
    dst
  cleanup:
    .wflip src+w base_jump_label
.end

// Complexity: phi+3
.def double_exact_xor dst1 dst2 src : base_jump_label cleanup
    .wflip src+w base_jump_label
    ;src
    .pad 2
  base_jump_label:
    ;cleanup
    dst1
    dst2
  cleanup:
    .wflip src+w base_jump_label
.end


// Complexity: 2phi+7
.def or dst src : end
    .if0 src end
    .one dst
  end:
.end


// Complexity: 2phi+6
.def and dst src : end
    .if1 src end
    .zero dst
  end:
.end


// Complexity: 1
.def not dst
    dst + dbit
.end

.def exact_not dst
    dst
.end



// ---------- Arithmetical Macros


// Unsafe for dst==carry (but there is no reason in calling it that way)
// Complexity: 2phi+10
.def inc1 dst carry : end
    .if0 carry end
    .not dst
    .if0 dst end
    .not carry
  end:
.end


// Unsafe for dst==carry (but there is no reason in calling it that way)
// Complexity: 8phi+33
.def add1 dst src carry : _src
    .mov _src src
    .inc1 dst _src
    .inc1 dst carry
    .or carry _src
    .skip
  _src: .bit 0
.end
