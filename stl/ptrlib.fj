// Every line is (pointing) bananas!
// Implementation of pointers (variables which represents a memory-place), stack and functions.

// should be assembled with bitlib.fj, veclib.fj and runlib.fj files
// This file is independent of the bit-width, and uses the consts defined at runlib.fj

// Everything after // is ignored, everything before first : is ignored too, and every whitespace is ignored (besides new line)
// An opcode is:  F;L  F  ;L  or just  ;  (no F => F=0;  no L => L=next)



// ---------- Init


.def init_ptr
    .pad 1
    __to_flip: 0;0
    __to_jump:  ;0

    __to_flip_var:        .var w 0
    __to_flip_return_var: .var w 0
    __to_jump_var:        .var w 0
.end



// ---------- Jump:


// like:  ;*ptr
// Complexity w(2phi+6)
.def ptr_jump ptr
    .bit_var_xor w __to_jump+w __to_jump_var __to_jump_var
    .bit_var_xor w __to_jump+w __to_jump_var ptr
    ;__to_jump
.end



// ---------- Flip:


// like:  *ptr;
// Complexity w(2phi+6)
.def ptr_flip ptr : cleanup
    .wflip __to_flip+w cleanup

    .bit_var_xor w __to_flip __to_flip_var __to_flip_var
    .bit_var_xor w __to_flip __to_flip_var ptr
    ;__to_flip

  cleanup:
    .wflip __to_flip+w cleanup
.end

// like:  (*ptr)+dbit;
// Assumes *ptr is dw-aligned
// Complexity w(2phi+7)
    // The comp_flip_if executes much less than w/2 operations.
.def ptr_flip_dbit ptr
//    .rep #dbit i comp_flip_if ptr+dbit+i*dw (dbit>>i)&1

    .rep #dww i comp_flip_if ptr+dbit+i*dw (dww>>i)&1
    .not ptr + ww*dw

    .ptr_flip ptr

    .rep #dww i comp_flip_if ptr+dbit+i*dw (dww>>i)&1
    .not ptr + ww*dw

//    .rep #dbit i comp_flip_if ptr+dbit+i*dw (dbit>>i)&1
.end

// Assumes *ptr is dw-aligned
.def xor_to_ptr ptr bit : end
    .if0 bit end
    .ptr_flip_dbit ptr
  end:
.end


// like:  .wflip *ptr value
// Assumes *ptr is w-aligned, and value is 2dw-aligned
// Complexity w(3phi+11)
.def ptr_flip_by ptr value
    .bit_var_xor w __to_flip __to_flip_var __to_flip_var
    .bit_var_xor w __to_flip __to_flip_var ptr
    .rep w i __advance_by_one_and_flip__ptr_flip_by (#(i^((i+1)%w))) (value>>i)&1
.end
.def __advance_by_one_and_flip__ptr_flip_by n do_flip : cleanup advance
    .comp_if0 do_flip advance
    .wflip __to_flip+w cleanup
    ;__to_flip
  cleanup:
    .wflip __to_flip+w cleanup
  advance:
    .rep n i exact_not __to_flip+i
.end

// Assumes *ptr is dw-aligned, and value is 2dw-aligned
.def ptr_flip_by_2nd_word ptr value
    .not ptr + dw*ww
    .ptr_flip_by ptr value
    .not ptr + dw*ww
.end



// ---------- Xor


// like:  .xor dst *ptr
// assumes *ptr is dw-aligned
// Complexity w(8phi+28)
.def xor_from_ptr dst ptr
    .exact_xor_from_ptr dst+dbit ptr
.end

.def exact_xor_from_ptr dst ptr : base_jump_label cleanup
    .ptr_flip_by_2nd_word ptr base_jump_label

    .ptr_jump ptr
    .pad 2
  base_jump_label:
    ;cleanup
    dst

  cleanup:
    .ptr_flip_by_2nd_word ptr base_jump_label

.end



// ---------- Stack


// sp always points to the last pushed value (at start - to stack[-1])
.def stack n
    .pad 1
    sp:    .var w stack-dw
    stack: .var n 0
.end


// Complexity w(2phi+10)
.def inc_ptr ptr
    .inc w-dww ptr+dww*dw
.end


// Complexity w(2phi+12)
.def dec_ptr ptr
    .dec w-dww ptr+dww*dw
.end


// Assumes address is 2dw-aligned
// Complexity w(5phi+21)
.def push_ret_address address
    .inc_ptr sp
    .ptr_flip_by_2nd_word sp address
.end

// Assumes address is 2dw-aligned
// Complexity w(5phi+23)
.def pop_ret_address address
    .ptr_flip_by_2nd_word sp address
    .dec_ptr sp
.end


// Complexity: w(4phi+17)
.def push_bit bit
    .inc_ptr sp
    .xor_to_ptr sp bit
.end

// Assumes *sp==bit.
// Complexity: w(4phi+19)
.def pop_bit bit
    .xor_to_ptr sp bit
    .dec_ptr sp
.end

// Complexity: w(12phi+47)
.def pop_res_bit bit
    .zero bit
    .xor_from_ptr bit sp
    .pop_bit bit
.end


// ---------- Functions


// Complexity w(5phi+21)
    // the pop_ret_address is counted for the future return
.def call address : return_label
    .push_ret_address return_label
    ;address

    .pad 2
  return_label:
    .pop_ret_address return_label
.end


// Complexity w(7phi+29)
    // the last-call's pop_ret_address is counted for this return
.def return
    .ptr_jump sp
.end
