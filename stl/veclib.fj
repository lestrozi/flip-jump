// Every line is (a vector of) bananas!
// Implementation of vector of bit-variables operations

// should be assembled with both bitlib.fj and runlib.fj files
// This file is independent of the bit-width, and uses the consts defined at runlib.fj

// Everything after // is ignored, everything before first : is ignored too, and every whitespace is ignored (besides new line)
// An opcode is:  F;L  F  ;L  or just  ;  (no F => F=0;  no L => L=next)



// ---------- Memory Variables:
// Size Complexity: n


.def var n value
    .rep n i bit (value>>i)&1
.end

.def var n
    .var n 0
.end


// ---------- Memory Manipulation:


// Complexity: n(phi+2)
.def zero n x
    .rep n i zero x+i*dw
.end


// Complexity: n(phi+3)
.def one n x
    .rep n i one x+i*dw
.end


// Complexity: n(2phi+5)
.def mov n dst src
    .rep n i mov dst+i*dw src+i*dw
.end



// ---------- Conditional Jump


// Complexity: n(2phi+8)
.def cmp n a b lt eq gt
    .rep n-1 i __cmp_next_eq a+(n-1-i)*dw b+(n-1-i)*dw lt gt
    .cmp a b lt eq gt
.end
.def __cmp_next_eq a b lt gt : eq
    .cmp a b lt eq gt
  eq:
.end


// Complexity: n(phi+4)
.def if n x l0 l1
    .rep n-1 i __if_next_l0 x+i*dw l1
    .if x+(n-1)*dw l0 l1
.end
.def __if_next_l0 x l1 : l0
    .if x l0 l1
  l0:
.end

.def if0 n x l0 : end
    .if n x l0 end
  end:
.end

.def if1 n x l1 : end
    .if n x end l1
  end:
.end



// ---------- Logical Macros:


// Complexity: n(phi+2)
.def xor n dst src
    .rep n i xor dst+dw*i src+dw*i
.end


// Complexity: n(phi+3)
.def bit_var_xor n bit var src
    .rep n i double_exact_xor bit+i var+dbit+i*dw src+i*dw
.end


// Complexity: n(2phi+7)
.def or n dst src
    .rep n i or dst+dw*i src+dw*i
.end


// Complexity: n(2phi+6)
.def and n dst src
    .rep n i and dst+dw*i src+dw*i
.end


// Complexity: n
.def not n dst
    .rep n i not dst+dw*i
.end


// Complexity: n(2phi+5)
.def shr n x
    .shr n 1 x
.end

// Complexity: n(2phi+5)
.def shr n times x
    .rep n-times i mov x+i*dw x+(i+times)*dw
    .zero times x+(n-times)*dw
.end


// Complexity: n(2phi+5)
.def shl n x
    .shl n 1 x
.end

// Complexity: n(2phi+5)
.def shl n times x
    .rep n-times i mov x+(n-1-i)*dw x+(n-1-i-times)*dw
    .zero times x
.end


// Complexity: n(2phi+5)
.def ror n x : temp_bit
    .mov temp_bit x
    .rep n-1 i mov x+i*dw x+(i+1)*dw
    .mov x+(n-1)*dw temp_bit
  .skip
  temp_bit: .bit 0
.end


// Complexity: n(2phi+5)
.def rol n x : temp_bit
    .mov temp_bit x+(n-1)*dw
    .rep n-1 i mov x+(n-1-i)*dw x+(n-1-i-1)*dw
    .mov x temp_bit
  .skip
  temp_bit: .bit 0
.end



// ---------- Arithmetical Macros
// carry is both input and output


// Complexity: n(2phi+10)
.def inc n x : carry
    .one carry
    .rep n i inc1 x+i*dw carry
  .skip
  carry: .bit 0
.end


// Complexity: n(2phi+12)
.def dec n x
    .not n x
    .inc n x
    .not n x
.end


// Complexity: n(2phi+11)
.def neg n x
    .not n x
    .inc n x
.end


// Complexity: n(8phi+33)
.def add n dst src : carry
    .zero carry
    .rep n i add1 dst+i*dw src+i*dw carry
    .skip
  carry: .bit 0
.end


// Complexity: n(8phi+35)
.def sub n dst src : carry
    .not n src
    .one carry
    .rep n i add1 dst+i*dw src+i*dw carry
    .not n src
  .skip
  carry: .bit 0
.end
